#!/bin/env python3
# -*- coding: utf-8 -*-
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#    A copy of the GNU General Public License is available at
#    http://www.gnu.org/licenses/gpl-3.0.html

"""Perform assembly based on debruijn graph."""
from random import randint
import statistics
import argparse
import os
import sys
import random
from operator import itemgetter
import networkx as nx
import matplotlib.pyplot as plt
random.seed(9001)

__author__ = "Lynda"
__copyright__ = "Universite  de Paris "
__credits__ = ["Lynda"]
__license__ = "GPL"
__version__ = "1.0.0"
__maintainer__ = "Lynda"
__email__ = "lyndamessad96@gmail.com"
__status__ = "Developpement"

def isfile(path):
    """Check if path is an existing file.
        Parameters:
        ---------
        path: Path to the file
    """
    if not os.path.isfile(path):
        if os.path.isdir(path):
            msg = "{0} is a directory".format(path)
        else:
            msg = "{0} does not exist.".format(path)
        raise argparse.ArgumentTypeError(msg)
    return path


def get_arguments():
    """Retrieves the arguments of the program.
      Returns: An object that contains the arguments
    """
    # Parsing arguments
    parser = argparse.ArgumentParser(description=__doc__, usage=
                                     "{0} -h"
                                     .format(sys.argv[0]))
    parser.add_argument('-i', dest='fastq_file', type=isfile,
                        required=True, help="Fastq file")
    parser.add_argument('-k', dest='kmer_size', type=int,
                        default=21, help="K-mer size (default 21)")
    parser.add_argument('-o', dest='output_file', type=str,
                        default=os.curdir + os.sep + "contigs.fasta",
                        help="Output contigs in fasta file")
    return parser.parse_args()


def read_fastq(fastq_file):
    """ This function is used to generate a sequence's generator from
the fastq file.
    Parameter:
    ---------
    fastq_file: str// fastq file with all sequences

    Return:
    ------
    sequences generator
    """
    with open(fastq_file) as file:
        for _ in enumerate(file): #parcourir les lines du fichier fastq
            yield next(file)[:-1]  # prend pas la derniere ligne du fichier
            next(file)
            next(file)


def cut_kmer(sequence, k_size):
    """
    This fiunction is used to genearte kmers from the sequences contained
    in the fastq file.

    Parameter:
    ---------
    sequence: str
    k_size: int // size of the kmer we want to split with

    Return:
    ------
    kmers's generator
    """
    for i in range(len(sequence)-k_size+1):
        yield sequence[i:i+k_size]


def build_kmer_dic(fastq_file, k_size):
    """
    This function is used to calculate  the number of occurence of
    kmers in a fq file.
    We use the functions cut_kmer() and read_fastq()

    Parameter:
    ---------
    fastq_file: str// fastq file with sequence
    k_size: int // size of the kmer we want to split with

    Return:
    ------
    kmer_dico: dictionary
        keys: kmer, values: nombre d'occurence of the kmer in the fastq file
    """
    dict_kmear = {}

    for seq in read_fastq(fastq_file):
        for k_mear in cut_kmer(seq, k_size):
            if k_mear not in dict_kmear.keys():
                dict_kmear[k_mear] = 0
            else:
                dict_kmear[k_mear] += 1

    return dict_kmear


def build_graph(k_mear_dict):

    """
    This function creats the kmer's graph.
    It deppends of the kmer preffix,suffix and the weight.
    Weight: occurence of the kmer

    Parameter:
    ---------
    km_mear_dict: dictionary
        dictionary of kmer gets from build_kmer_dic() function

    Return:
    ------
    g: nx DiGraph : name = kmers_graph_kmer_size.png
    """
    k = vars(get_arguments())['kmer_size'] #kmer's size
    graph = nx.DiGraph()
    for kmear, w in k_mear_dict.items():
        g.add_edge(kmear[:-1], kmear[1:], weight = w)

    plt.subplot(111)
    nx.draw(graph, with_labels=True, font_weight='bold')
    plt.savefig("kmers_graph_{}.png".format(k))  #graph name
    return graph


def get_starting_nodes(graph):
    """
    This function generats the starting nodes.

    Parameter:
    ---------
    graph: nx DiGraph// generated by the build_graph() function.

    Return:
    ------
    start_nodes: list // list of starting nodes found in the graph
    """
    start_nodes = []
    nodes = list(graph.nodes())
    for node in nodes:
        if node not in list(graph.predecessors(node)):
        #Returns an iterator over predecessor nodes of n.
            start_nodes.append(node)

    return start_nodes


def get_sink_nodes(graph):
    """
    This function generats the sink nodes.

    Parameter:
    ---------
    graph: nx DiGraph// generated by the build_graph() function.

    Return:
    ------
    sink_nodes: list // list of sink nodes found in the graph
    """
    sink_nodes = []
    nodes = list(graph.nodes())
    for node in nodes:
        if not list(graph.successors(node)):
        #Returns an iterator over successor nodes of n
            sink_nodes.append(node)

    return sink_nodes


def get_contigs(graph, start_nodes, sink_nodes):
    """
    This function generats a list of tuples that contains the
    contig and it's length.

    Parameter:
    ---------
    graph: nx DiGraph// generated by the build_graph() function.
    start_nodes : list// list of starting nodes found in the graph.
                        Generated by the function get_starting_nodes()

    sink_nodes: lis// list of sink nodes found in the graph.
                    Generated by the function get_sink_nodes()

    Return:
    ------
    contigs_list: list of tuple// liste of tuple [(contig,len(contig))]
    """
    contigs_list = []
    for st in start_nodes: #st : source
        for sk in sink_nodes: #sk : target
            #Generate all simple paths in the graph G from
                # source(st) to target (sk)
            paths = list(nx.all_simple_paths(graph, st, sk))
            print(paths)
            if paths:  #!= None ! -> returns True
                contig = paths[0][0]
                print(contig)
                for i in range(1, len(paths[0])):
                    contig += paths[0][i][-1]
                contigs_list.append((contig, len(contig)))

    return contigs_list


def save_contigs(contigs, output_file):
    """
    This function creats the kmer's graph.
    It deppends of the kmer preffix,suffix and the weight.
    Weight: occurence of the kmer

    Parameter:
    ---------
    contig: list of tuple// liste of tuple [(contig,len(contig))]
    output_file : str // name of the output file

    Return:
    ------
    file : str // output file in fasta format generated by the functon fill()
    """
    with open(output_file, "w") as f:
        for contig, length in enumerate(contigs):
            line = ">contig_" + str(contig) + " len=" + str(length[1]) + "\n"
            f.write(line)
            f.write(fill(length[0]))
            f.write("\n")


def fill(text, width=80):
    """Split text with a line return to respect fasta format"""
    return os.linesep.join(text[i:i+width] for i in range(0, len(text), width))


#==============================================================
# Main program
#==============================================================
def main():
    """
    Main program function
    """
    # Get arguments
    args = get_arguments()

    # Sequence generator
    sequences = read_fastq(args.fastq_file)

    # kmer occuracy disctionary
    dict_kmer_occur = build_kmer_dic(args.fastq_file,args.kmer_size)

    # Buijn Graph
    graph = build_graph(dict_kmer_occur)

    #Contigs:
    contigs = get_contigs(graph,
                          get_starting_nodes(graph), get_sink_nodes(graph))

    # Save contigs in file
    save_contigs(contigs, args.output_file)

if __name__ == '__main__':
    main()
